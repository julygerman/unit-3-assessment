{"version":3,"sources":["Components/CircleSelector/CircleSelector.jsx","Components/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","className","circleNum","map","circle","idx","circleIdx","onClick","handleSelectCircle","Circles","App","state","setState","style","fontSize","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAkBeA,G,YAfQ,SAACC,GACpB,OACI,yBAAKC,UAAU,kBACVD,EAAME,UAAUC,KAAI,SAACC,EAAQC,GAAT,OACrB,4BACAJ,UAAWD,EAAMM,YAAcD,EAAM,mBAAqB,GAC1DE,QAAS,kBAAMP,EAAMQ,mBAAmBH,KAEvCL,EAAMM,YAAcD,EAApB,iBAAoCA,EAAM,EAA1C,qCAA0EA,EAAI,UCO5EI,G,MAfC,SAACT,GACb,OACI,yBAAKC,UAAU,WACdD,EAAME,UAAUC,KAAI,SAACC,EAAQC,GAAT,OACrB,yBAAKJ,UAAWD,EAAMM,YAAcD,EAAM,mBAAqB,GAC/DE,QAAS,kBAAMP,EAAMQ,mBAAmBH,MAEvCL,EAAMM,UAAN,WAA8BD,EAAM,WCLvCH,EAAY,CAAC,IAAK,IAAK,IAAK,KAiCnBQ,E,4MA9BbC,MAAQ,CACNL,UAAY,G,EAGdE,mBAAqB,SAACH,GACpB,EAAKO,SAAS,CAAEN,UAAWD,K,uDAI3B,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,qBAAqBY,MAAO,CAACC,SAAS,SAAxD,2BACA,8BACE,kBAAC,EAAD,CACAZ,UAAaA,EACbI,UAAWS,KAAKJ,MAAML,UACtBE,mBAAoBO,KAAKP,qBAGzB,kBAAC,EAAD,CACAN,UAAaA,EACbI,UAAWS,KAAKJ,MAAML,UACtBE,mBAAoBO,KAAKP,2B,GAvBjBQ,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d2c6bcc.chunk.js","sourcesContent":["import React from 'react'\nimport './CircleSelector.css'\n\nconst CircleSelector = (props) => {\n    return ( \n        <div className='CircleSelector'>\n            {props.circleNum.map((circle, idx) =>\n            <button\n            className={props.circleIdx === idx ? 'selected rainbow' : ''}\n            onClick={() => props.handleSelectCircle(idx)}\n            >\n            {props.circleIdx === idx ? `Circle ${idx + 1} Selected` : `Select Circle ${idx+1}`}\n            </button>\n            )}\n        </div>\n     );\n}\n \nexport default CircleSelector;","import React from 'react'\nimport './Circles.css'\n\nconst Circles = (props) => {\n    return ( \n        <div className='Circles'>\n        {props.circleNum.map((circle, idx)=>\n        <div className={props.circleIdx === idx ? 'selected rainbow' : ''}\n        onClick={() => props.handleSelectCircle(idx)}\n        >\n        {props.circleIdx === idx ? ` ${idx + 1}` : ` ${idx+1}`}      \n        </div>\n        )}\n    \n    </div>\n     );\n}\n \nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './Components/CircleSelector/CircleSelector'\nimport Circles from './Components/Circles/Circles'\n\nconst circleNum = ['0', '1', '2', '3']\n\nclass App extends Component {\n  state = {\n    circleIdx : 0\n  }\n\n  handleSelectCircle = (idx) => {\n    this.setState({ circleIdx: idx })\n   }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header rainbow\" style={{fontSize:'50px'}}>UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector \n          circleNum = {circleNum}\n          circleIdx={this.state.circleIdx}\n          handleSelectCircle={this.handleSelectCircle}\n          />\n\n          <Circles \n          circleNum = {circleNum}\n          circleIdx={this.state.circleIdx}\n          handleSelectCircle={this.handleSelectCircle}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}